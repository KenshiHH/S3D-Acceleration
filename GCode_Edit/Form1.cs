using System;
using System.ComponentModel;
using System.IO;
using System.Windows.Forms;

namespace GCode_Edit
{
    public partial class Form1 : Form
    {
        string GCodeFilePath =null;
        string GCodePatchedFilePath;
        string tempPath;

        public Form1()
       
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {

        }

        private bool checkForPatchedFile(string OpenedFile)
        {
            bool b_PatchFound = false;
            StreamReader stream_PatchCheck = new StreamReader(OpenedFile);
            if (stream_PatchCheck.ReadLine().Contains("patched by GCode_Edit"))
            {
                b_PatchFound = true;
            }
                stream_PatchCheck.Close();
                ReadPatchedFileValues(OpenedFile);
            return b_PatchFound;
        }

        private bool CheckForS3DFile(string OpenedFile)
        {
            bool b_S3DFileFound = false;
            StreamReader stream_S3DCheck = new StreamReader(OpenedFile);
            for (int i = 0; i < 50; i++)
            {
                if (stream_S3DCheck.ReadLine().Contains("G-Code generated by Simplify3D"))
                {
                    b_S3DFileFound = true;
                }
            }
            return b_S3DFileFound;

        }

        private void WriteLinearAdvance(bool Check, StreamWriter stream)
        {
            if (Check)
            {
                stream.WriteLine("M900 K" + LinearAdvance.Value);
            }
            else
                stream.WriteLine("M900 K0");
        }

        private void ReadPatchedFileValues(string PatchedFile)
        {
            StreamReader PatchedGCodeFile = new StreamReader(PatchedFile);
            char[] MyChar = { ';', ' ' };
            string tmpString;
            while ((tmpString = PatchedGCodeFile.ReadLine()) != null)
            {
                switch (tmpString)
                {
                    case "; Skirt ACC":
                        acceleration_Skirt.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Skirt JERK":
                        jerk_Skirt.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Outer Perimter ACC":
                        acceleration_OuterPerimeter.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Outer Perimter JERK":
                        jerk_OuterPerimeter.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Inner Perimter ACC":
                        acceleration_InnerPerimeter.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Inner Perimter JERK":
                        jerk_InnerPerimeter.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Solid Layer ACC":
                        acceleration_SolidLayer.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Solid Layer JERK":
                        jerk_SolidLayer.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Infill ACC":
                        acceleration_Infill.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Infill JERK":
                        jerk_Infill.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Gap Fill ACC":
                        acceleration_GapFill.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Gap Fill JERK":
                        jerk_GapFill.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Support ACC":
                        acceleration_Support.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Support JERK":
                        jerk_Support.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Dense Support ACC":
                        acceleration_DenseSupport.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Dense Support JERK":
                        jerk_DenseSupport.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Bridge ACC":
                        acceleration_bridge.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;
                    case "; Bridge JERK":
                        jerk_bridge.Value = int.Parse(PatchedGCodeFile.ReadLine().TrimStart(MyChar));
                        break;



                }
            }
        }

        private void WritePatchedFileValues(StreamWriter Target)
        {
        
            //Header
            Target.WriteLine("; patched by GCode_Edit");
            
            // Skirt
            Target.WriteLine("; Skirt ACC");
            Target.WriteLine("; " + acceleration_Skirt.Value.ToString());
            Target.WriteLine("; Skirt JERK");
            Target.WriteLine("; " + jerk_Skirt.Value.ToString());

            // Outer Perimeter
            Target.WriteLine("; Outer Perimter ACC");
            Target.WriteLine("; " + acceleration_OuterPerimeter.Value.ToString());
            Target.WriteLine("; Outer Perimter JERK");
            Target.WriteLine("; " + jerk_OuterPerimeter.Value.ToString());
            // Inner Perimeter
            Target.WriteLine("; Inner Perimter ACC");
            Target.WriteLine("; " + acceleration_InnerPerimeter.Value.ToString());
            Target.WriteLine("; Inner Perimter JERK");
            Target.WriteLine("; " + jerk_InnerPerimeter.Value.ToString());
            // Solid Layer
            Target.WriteLine("; Solid Layer ACC");
            Target.WriteLine("; " + acceleration_SolidLayer.Value.ToString());
            Target.WriteLine("; Solid Layer JERK");
            Target.WriteLine("; " + jerk_SolidLayer.Value.ToString());
            // Infill
            Target.WriteLine("; Infill ACC");
            Target.WriteLine("; " + acceleration_Infill.Value.ToString());
            Target.WriteLine("; Infill JERK");
            Target.WriteLine("; " + jerk_Infill.Value.ToString());
            // Gap Fill
            Target.WriteLine("; Gap Fill ACC");
            Target.WriteLine("; " + acceleration_GapFill.Value.ToString());
            Target.WriteLine("; Gap Fill JERK");
            Target.WriteLine("; " + jerk_GapFill.Value.ToString());
            // Support
            Target.WriteLine("; Support ACC");
            Target.WriteLine("; " + acceleration_Support.Value.ToString());
            Target.WriteLine("; Support JERK");
            Target.WriteLine("; " + jerk_Support.Value.ToString());
            // Dense Support
            Target.WriteLine("; Dense Support ACC");
            Target.WriteLine("; " + acceleration_DenseSupport.Value.ToString());
            Target.WriteLine("; Dense Support JERK");
            Target.WriteLine("; " + jerk_DenseSupport.Value.ToString());
            // Bridge
            Target.WriteLine("; Bridge ACC");
            Target.WriteLine("; " + acceleration_bridge.Value.ToString());
            Target.WriteLine("; Bridge JERK");
            Target.WriteLine("; " + jerk_bridge.Value.ToString());
            // Edit End
            Target.WriteLine("; GCode_Edit End");
            Target.WriteLine("");
        }

        private void WriteGcode(string Soruce, string Target )
        {
            ////////////////////
            // ACC Values
            ///////////////////

            string newSkirtACC = "M204 S" + acceleration_Skirt.Value.ToString();
            string newOuterACC = "M204 S" + acceleration_OuterPerimeter.Value.ToString();
            string newInnerACC = "M204 S" + acceleration_InnerPerimeter.Value.ToString();
            string newSolidACC = "M204 S" + acceleration_SolidLayer.Value.ToString();
            string newInfillACC = "M204 S" + acceleration_Infill.Value.ToString();
            string newGapACC = "M204 S" + acceleration_GapFill.Value.ToString();
            string newSupportACC = "M204 S" + acceleration_Support.Value.ToString();
            string newDenseSupportACC = "M204 S" + acceleration_DenseSupport.Value.ToString();
            string newBridgeACC = "M204 S" + acceleration_bridge.Value.ToString();

            string newSkirtJerk = "M205 X" + jerk_Skirt.Value.ToString() + " Y" + jerk_Skirt.Value.ToString();
            string newOuterJerk = "M205 X" + jerk_OuterPerimeter.Value.ToString() + " Y" + jerk_OuterPerimeter.Value.ToString();
            string newInnerJerk = "M205 X" + jerk_InnerPerimeter.Value.ToString() + " Y" + jerk_InnerPerimeter.Value.ToString();
            string newSolidJerk = "M205 X" + jerk_SolidLayer.Value.ToString() + " Y" + jerk_SolidLayer.Value.ToString();
            string newInfillJerk = "M205 X" + jerk_Infill.Value.ToString() + " Y" + jerk_Infill.Value.ToString();
            string newGapJerk = "M205 X" + jerk_GapFill.Value.ToString() + " Y" + jerk_GapFill.Value.ToString();
            string newSupportJerk = "M205 X" + jerk_Support.Value.ToString() + " Y" + jerk_Support.Value.ToString();
            string newDenseSupportJerk = "M205 X" + jerk_DenseSupport.Value.ToString() + " Y" + jerk_DenseSupport.Value.ToString();
            string newBridgeJerk = "M205 X" + jerk_bridge.Value.ToString() + " Y" + jerk_bridge.Value.ToString();

            ///////////////////
            // End
            //////////////////



            string tmpString;
            int linesfound = 0;
            StreamReader gcode_source = new StreamReader(Soruce);
            StreamWriter gcode_target = new StreamWriter(GCodePatchedFilePath);

            // Header
            WritePatchedFileValues(gcode_target);


            while ((tmpString = gcode_source.ReadLine()) != null)
            {

                gcode_target.WriteLine(tmpString);
                switch (tmpString)
                {
                    case "; outer perimeter":
                        linesfound++;
                        gcode_target.WriteLine(newOuterACC);
                        gcode_target.WriteLine(newOuterJerk);
                        WriteLinearAdvance(checkBox_OuterPerimeter.Checked, gcode_target);
                        break;
                    case "; inner perimeter":
                        linesfound++;
                        gcode_target.WriteLine(newInnerACC);
                        gcode_target.WriteLine(newInnerJerk);
                        WriteLinearAdvance(checkBox_InnerPerimeter.Checked, gcode_target);
                        break;
                    case "; skirt":
                        linesfound++;
                        gcode_target.WriteLine(newSkirtACC);
                        gcode_target.WriteLine(newSkirtJerk);
                        WriteLinearAdvance(checkBox_skirt.Checked, gcode_target);
                        break;
                    case "; solid layer":
                        linesfound++;
                        gcode_target.WriteLine(newSolidACC);
                        gcode_target.WriteLine(newSolidJerk);
                        WriteLinearAdvance(checkBox_SolidLayer.Checked, gcode_target);
                        break;
                    case "; infill":
                        linesfound++;
                        gcode_target.WriteLine(newInfillACC);
                        gcode_target.WriteLine(newInfillJerk);
                        WriteLinearAdvance(checkBox_Infill.Checked, gcode_target);
                        break;
                    case "; gap fill":
                        linesfound++;
                        gcode_target.WriteLine(newGapACC);
                        gcode_target.WriteLine(newGapJerk);
                        WriteLinearAdvance(checkBox_GapFill.Checked, gcode_target);
                        break;
                    case "; support":
                        linesfound++;
                        gcode_target.WriteLine(newSupportACC);
                        gcode_target.WriteLine(newSupportJerk);
                        WriteLinearAdvance(checkBox_Support.Checked, gcode_target);
                        break;
                    case "; dense support":
                        linesfound++;
                        gcode_target.WriteLine(newDenseSupportACC);
                        gcode_target.WriteLine(newDenseSupportJerk);
                        WriteLinearAdvance(checkBox_DenseSupport.Checked, gcode_target);
                        break;
                    case "; bridge":
                        linesfound++;
                        gcode_target.WriteLine(newBridgeACC);
                        gcode_target.WriteLine(newBridgeJerk);
                        WriteLinearAdvance(checkBox_bridge.Checked, gcode_target);
                        break;
                }
            }


            gcode_source.Close(); // close StreamReader
            gcode_target.Close(); // close StreamWriter
            MessageBox.Show("lines added: " + linesfound.ToString());

        }



        private void button1_Click(object sender, EventArgs e)
        {
            Stream myStream = null;
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.InitialDirectory = "c:\\";
            openFileDialog1.Filter = "GCode (*.gcode)|*.gcode";
            openFileDialog1.FilterIndex = 2;
            openFileDialog1.RestoreDirectory = true;

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    if ((myStream = openFileDialog1.OpenFile()) != null)
                    {
                        using (myStream)
                        {
                            GCodeFilePath = openFileDialog1.FileName;
                            StreamReader s3d_check = new StreamReader(GCodeFilePath);
                            string tmp_s3d_string = s3d_check.ReadLine();
                            if (CheckForS3DFile(GCodeFilePath) != true)
                            {
                                GCodeFilePath = null;
                                button_Modify.Enabled = false;
                                s3d_check.Close();
                                MessageBox.Show("Error: No Valid S3D Gcode");
                            }
                            else
                            {
                                tempPath = openFileDialog1.FileName;
                                if (checkForPatchedFile(GCodeFilePath))
                                {
                                    GCodeFilePath = null;
                                    // Read Patched File Values();
                                    MessageBox.Show("Patched File Values Loaded");
                                    button_Modify.Enabled = false;
                                }
                                else
                                {
                                    label_FileSource.Text = Path.GetFileNameWithoutExtension(GCodeFilePath);
                                    GCodePatchedFilePath = Path.GetDirectoryName(GCodeFilePath) + "\\" + Path.GetFileNameWithoutExtension(GCodeFilePath) + "_patched" + Path.GetExtension(GCodeFilePath);
                                    button_Modify.Enabled = true;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: Could not read file from disk. Original error: " + ex.Message);
                }
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {

            WriteGcode(GCodeFilePath, GCodePatchedFilePath);

        }

        private void textBox_OuterAcceleration_TextChanged(object sender, EventArgs e)
        {

        }

        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {

        }

        private void numericUpDown1_ValueChanged_1(object sender, EventArgs e)
        {

        }

        private void numericUpDown1_ValueChanged_2(object sender, EventArgs e)
        {

        }

        private void checkBox_skirt_CheckedChanged(object sender, EventArgs e)
        {

        }
    }
}
